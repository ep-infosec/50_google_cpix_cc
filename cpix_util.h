// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef CPIX_CC_CPIX_UTIL_H_
#define CPIX_CC_CPIX_UTIL_H_

#include <cstdint>
#include <string>
#include <vector>

namespace cpix {

constexpr char kPubKeyHeader[] = "-----BEGIN PUBLIC KEY-----\n";
constexpr char kPubKeyFooter[] = "\n-----END PUBLIC KEY-----\n";
constexpr char kPrivateKeyHeader[] = "-----BEGIN PRIVATE KEY-----\n";
constexpr char kPrivateKeyFooter[] = "\n-----END PRIVATE KEY-----\n";
constexpr char kCertHeader[] = "-----BEGIN CERTIFICATE-----\n";
constexpr char kCertFooter[] = "\n-----END CERTIFICATE-----\n";

// Returns a vector of raw bytes from a string of hex digits.
std::vector<uint8_t> HexStringToBytes(const std::string& str);

// Returns a vector of raw bytes from a GUID-formatted hex string.
std::vector<uint8_t> GUIDStringToBytes(const std::string& str);

// Returns a vector of raw bytes from a Base64 encoded string.
std::vector<uint8_t> Base64StringToBytes(const std::string& str);

// Returns a Base64 encoded string from a vector of raw bytes.
std::string BytesToBase64String(const std::vector<uint8_t>& data);

// Returns a string in GUID format from raw bytes.
std::string BytesToGUID(const std::vector<uint8_t>& data);

// Returns a string of hex digis from raw bytes.
std::string BytesToHexString(const std::vector<uint8_t>& data);

// Get a vector of n / 8 randomly-generated bytes.
std::vector<uint8_t> GetRandomBytes(int num_bytes);

// Takes a base64 encoded certificate PEM string and properly formats it with
// header/footer and newlines every 64 characters.
std::string AddCertHeadersAndNewlines(const std::string& key);

// Takes a base64 encoded rsa public key PEM string and properly formats it with
// header/footer and newlines every 64 characters.
std::string AddPubKeyHeadersAndNewlines(const std::string& key);

// Takes a base64 encoded rsa private key PEM string and properly formats it
// with header/footer and newlines every 64 characters.
std::string AddPrivateKeyHeadersAndNewlines(const std::string& key);

// Takes a properly formatted PEM string and returns it with header/footer
// removed and newlines stripped.
std::string StripPEMHeadersAndNewlines(const std::string& cert);

}  // namespace cpix
#endif  // CPIX_CC_CPIX_UTIL_H_
