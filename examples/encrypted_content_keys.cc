// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "content_key.h"
#include "cpix_message.h"
#include "recipient.h"

int main() {
  const std::vector<uint8_t> key_id1 = {
      0xe3, 0x47, 0x74, 0xd9, 0xd7, 0x75, 0xeb, 0x56, 0xb7, 0xe3, 0xbf, 0x3b,
      0x6b, 0x5e, 0x79, 0xe7, 0xbd, 0xb7, 0xdb, 0x97, 0x78, 0xed, 0xbf, 0x34};

  const std::vector<uint8_t> key_id2 = {
      0xd1, 0xad, 0xf4, 0x79, 0xae, 0x1f, 0xe7, 0x7f, 0x5d, 0xe1, 0xbd, 0x36,
      0xf7, 0x86, 0xf6, 0xd9, 0xbd, 0xdf, 0x6d, 0xad, 0xb9, 0xef, 0xa7, 0x77};

  const std::vector<uint8_t> content_key_value1 = {
      0x80, 0xfc, 0x6d, 0xd0, 0xf3, 0x30, 0xac, 0x73,
      0x38, 0x4d, 0xd8, 0xf0, 0x75, 0x09, 0xa1, 0x85};

  const std::vector<uint8_t> content_key_value2 = {
      0xc7, 0xf8, 0x1a, 0xa1, 0x2f, 0xdf, 0x0e, 0x2f,
      0x01, 0xa8, 0x63, 0x48, 0x86, 0x48, 0xb1, 0xc1};

  const std::vector<uint8_t> certificate = {
      0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xbc, 0x39, 0x25,
      0x06, 0x5d, 0x99, 0xa4, 0x05, 0x5f, 0xe7, 0xfc, 0x59, 0x1f, 0x28, 0xb5,
      0x48, 0xd2, 0x0d, 0x2e, 0xea, 0xaa, 0xeb, 0xed, 0x74, 0xef, 0xc9, 0x2f,
      0x90, 0xf8, 0xad, 0x96, 0x80, 0x24, 0x0f, 0xc2, 0xdc, 0x71, 0x58, 0xea,
      0x3e, 0xfa, 0x5c, 0xc9, 0x29, 0x87, 0x51, 0x7c, 0xcb, 0x54, 0x28, 0x7c,
      0xf9, 0x10, 0x15, 0xb0, 0xac, 0x8f, 0xeb, 0x9e, 0xd3, 0xd7, 0x70, 0x35,
      0x93, 0x8a, 0xc7, 0x1f, 0x45, 0x97, 0xe3, 0xc8, 0x0b, 0x72, 0xa1, 0x65,
      0x79, 0xcf, 0x74, 0x6c, 0x87, 0xd9, 0xeb, 0x7d, 0xa0, 0xb9, 0x0e, 0x4b,
      0x45, 0x3d, 0x81, 0xf0, 0x18, 0x6e, 0x9f, 0x97, 0x11, 0x54, 0xcb, 0xd8,
      0xe2, 0x35, 0x1a, 0x4b, 0xe7, 0x4d, 0xbf, 0x68, 0x1d, 0xad, 0x4e, 0xca,
      0x57, 0x25, 0x9e, 0x2f, 0xf7, 0xf8, 0x44, 0x6f, 0xc2, 0x0c, 0x78, 0xd,
      0x19, 0xef, 0x22, 0x5a, 0x9f, 0x78, 0x9f, 0x17, 0x1a, 0xb8, 0xc0, 0x72,
      0x0f, 0x51, 0x5c, 0x21, 0x6f, 0xc9, 0x1e, 0x80, 0xde, 0x7c, 0x25, 0x47,
      0xd0, 0x28, 0x01, 0x2a, 0x94, 0x6e, 0x34, 0x39, 0x1f, 0x42, 0x39, 0xbe,
      0x5f, 0x0e, 0xc2, 0x7c, 0xb4, 0xfa, 0xa5, 0xb9, 0x05, 0x4e, 0x9c, 0x45,
      0x75, 0x63, 0xa3, 0x87, 0xc3, 0xe5, 0xdd, 0x54, 0x35, 0x85, 0xd4, 0x8d,
      0xc2, 0x5f, 0xda, 0x6f, 0x86, 0x12, 0xcf, 0xb3, 0x8b, 0x65, 0x23, 0x1d,
      0x34, 0x43, 0xc5, 0x2e, 0xb1, 0x49, 0x56, 0x56, 0x25, 0x93, 0xf7, 0x09,
      0xbf, 0x9e, 0x48, 0x21, 0x91, 0x6a, 0xde, 0x27, 0x9e, 0x6d, 0x38, 0x2f,
      0xf5, 0xf4, 0x93, 0x23, 0x46, 0xe8, 0x41, 0xb4, 0x21, 0xb4, 0x02, 0x50,
      0x79, 0x71, 0x48, 0x72, 0x0f, 0x57, 0x46, 0xa0, 0x20, 0xc0, 0x19, 0x02,
      0xf9, 0xd4, 0x76, 0x02, 0x2d, 0x85, 0xfd, 0x79, 0xcd, 0x70, 0xfc, 0x41,
      0x8b, 0x02, 0x03, 0x01, 0x00, 0x01};

  cpix::CPIXMessage message;

  std::unique_ptr<cpix::ContentKey> key1(new cpix::ContentKey);
  key1->set_key_id(key_id1);
  key1->SetKeyValue(content_key_value1);
  message.AddContentKey(std::move(key1));

  std::unique_ptr<cpix::ContentKey> key2(new cpix::ContentKey);
  key2->set_key_id(key_id2);
  key2->SetKeyValue(content_key_value2);
  message.AddContentKey(std::move(key2));

  std::unique_ptr<cpix::Recipient> recipient1(new cpix::Recipient);
  recipient1->set_delivery_key(certificate);
  message.AddRecipient(std::move(recipient1));

  printf("Encrypted Content Key:\n\n%s\n\n", message.ToString().c_str());
}
